---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
  namespace: nginx
data:
  nginx.conf: |
    user nginx;
    worker_processes  1;
    
    error_log  /dev/stderr warn;
    pid        /var/run/nginx.pid;

    events {
      worker_connections  1024;
    }

    http {
      include       /etc/nginx/mime.types;
      default_type  application/octet-stream;

      sendfile        on;
    
      tcp_nopush on;
      tcp_nodelay on;
      
      keepalive_timeout 65;

      types_hash_max_size 2048;
      client_max_body_size 20M;
      
      ##
      # SSL Settings
      ##

      ssl_protocols TLSv1.2 TLSv1.3;
      ssl_prefer_server_ciphers on;

      set_real_ip_from 0.0.0.0/0;

      log_format main '$remote_addr - $remote_user [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent"';

      access_log  /dev/stdout  main;

      ##
      # Gzip Settings
      ##

      gzip on;
      gzip_disable "msie6";

      gzip_vary on;
      gzip_proxied any;
      gzip_comp_level 6;
      gzip_buffers 16 8k;
      gzip_http_version 1.1;
      gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

      include /etc/nginx/conf.d/*.conf;
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-conf-tpl
  namespace: nginx
data:
  wordpress.conf.template: |
    server {
      listen       80 default_server;
      listen  [::]:80 default_server;

      server_name _;
      root /var/www/html;
      index index.html index.php;
      
      client_max_body_size 20M;

      # Security
      include /etc/nginx/custom.conf.d/nginx-custom.conf;
      include /etc/nginx/custom.conf.d/wp-hardening.conf;

      # Prevent Clickjacking
      add_header X-Frame-Options "SAMEORIGIN";
      add_header X-Content-Type-Options "nosniff";

      charset utf-8;

      # Set the custom error pages
      error_page 404 /index.php;
      error_page 403 /index.php;

      # Logs
      error_log /dev/stderr;
      access_log /dev/stdout main;
     
      location ~* /xmlrpc.php$ {
        fastcgi_pass ${KUBE_SVC_NAME}:9000;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

        allow ${SECURE_SUBNET};
        allow 127.0.0.1; 
        deny all;
      }

      location ~* ^/(?:\.|conf|data/(?:files|personal|logs|plugins|tmp|cache)|plugins/editor.zoho/agent/files) {
          deny all;
      }

      location ~* /data/public/.*.(ser|htaccess)$ {
          deny all;
      }

      location ~* ^/(favicon.ico|robots.txt) {
          log_not_found off;
      }

      location = /favicon.ico {
          expires 1y;
          log_not_found off;
          access_log off;
      }

      location ~ ^/(wp-admin|wp-login.php) {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass ${KUBE_SVC_NAME}:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param SCRIPT_NAME $fastcgi_script_name;

        allow ${SECURE_SUBNET};
        allow 127.0.0.1; 
        deny all;
      }

      location ~ \.php$ {
          fastcgi_split_path_info ^(.+\.php)(/.+)$;
          fastcgi_pass ${KUBE_SVC_NAME}:9000;
          fastcgi_index index.php;
          include fastcgi_params;
          fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
          fastcgi_param SCRIPT_NAME $fastcgi_script_name;
      }

      location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
          expires 7d;
          add_header Pragma public;
          add_header Cache-Control "public, must-revalidate, proxy-revalidate";
      }

      location / {
          try_files $uri $uri/ /index.php?$args;
      }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-custom-conf
  namespace: nginx
data:
  nginx-custom.conf: |
    # Directives to send expires headers and turn off 404 error logging.
    location ~* ^.+\.(curl|heic|swf|tiff|rss|atom|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$ {
        log_not_found off;
        expires max;
    }

    # Web fonts send expires headers
    location ~* \.(?:eot|otf|ttf|woff|woff2)$ {
        expires max;
        add_header Cache-Control "public";
    }

    # SVGs & MP4 WEBM send expires headers - this rule is set specific to ns site
    location ~* \.(?:svg|svgz|mp4|webm)$ {
        expires max;
        add_header Cache-Control "public";
    }

    # Media: images, icons, video, audio send expires headers.
    location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|aac|m4a|mp3|ogg|ogv|webp)$ {
        expires 1M;
        add_header Cache-Control "public";
    }

    # Cache css & js files
    location ~* \.(?:css(\.map)?|js(\.map)?)$ {
        add_header "Access-Control-Allow-Origin" "*";
        log_not_found off;
        expires 30d;
    }

    # CSS and Javascript send expires headers.
    location ~* \.(?:css|js)$ {
        expires 1y;
        add_header Cache-Control "public";
    }

    # HTML send expires headers.
    location ~* \.(html)$ {
        expires 7d;
        add_header Cache-Control "public";
    }

    # Security settings for better privacy
    # Deny hidden files
    # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
    location ~ /\. {
        deny all;
    }

    # Return 403 forbidden for readme.(txt|html) or license.(txt|html) or example.(txt|html) or other common git repository files
    location ~*  "/(^$|readme|license|example|README|LEGALNOTICE|INSTALLATION|CHANGELOG)\.(txt|html|md)" {
        deny all;
    }

    # Deny backup extensions & log files and return 403 forbidden
    location ~* "\.(old|orig|original|php#|php~|php_bak|save|swo|aspx?|tpl|sh|bash|bak?|cfg|cgi|dll|exe|git|hg|ini|jsp|log|mdb|out|sql|svn|swp|tar|rdf)$" {
        deny all;
    }

    # common nginx configuration to block sql injection and other attacks
    location ~* "(eval\()" {
        deny all;
    }
    location ~* "(127\.0\.0\.1)" {
        deny all;
    }
    location ~* "([a-z0-9]{2000})" {
        deny all;
    }
    location ~* "(javascript\:)(.*)(\;)" {
        deny all;
    }

    location ~* "(base64_encode)(.*)(\()" {
        deny all;
    }
    location ~* "(GLOBALS|REQUEST)(=|\[|%)" {
        deny all;
    }
    location ~* "(<|%3C).*script.*(>|%3)" {
        deny all;
    }
    location ~ "(\\|\.\.\.|\.\./|~|`|<|>|\|)" {
        deny all;
    }
    location ~* "(boot\.ini|etc/passwd|self/environ)" {
        deny all;
    }
    location ~* "(thumbs?(_editor|open)?|tim(thumb)?)\.php" {
        deny all;
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wp-hardening
  namespace: nginx
data:
  wp-hardening.conf: |
    # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
    location ~ /\. {
        deny all;
    }

    # Deny access to any files with a .php extension in the uploads directory
    location ~* /uploads/.*\.php$ {
        deny all;
    }

    # Deny access to any files with a .php extension in the uploads directory for multisite
    location ~* /files/.*\.php$ {
        deny all;
    }

    # Since version 2.5.7, Akismet introduced a new .htaccess file to block direct access to php files
    # Ref: http://wordpress.org/extend/plugins/akismet/changelog/
    location ~* /akismet/.*\.php$ {
        allow 127.0.0.1;
        deny all;
    }

    # Restrict direct access to cached content
    location /wp-content/cache/ {
        deny all;
    }

    # hide any backup or SQL dump files
    location ~ ^.+\.(sql|bak|php~|php#|php.save|php.swp|php.swo)$ {
        deny all;
    }

    #Deny access to wp-content folders for suspicious files
    location ~* ^/(wp-content)/(.*?)\.(zip|gz|tar|bzip2|7z)\$ {
      deny all;
    }

    location ~ ^/wp-content/uploads/sucuri {
      deny all;
    }

    location ~ ^/wp-content/updraft {
      deny all;
    }

    #Disable execution of scripts other than PHP from your document root
    location ~* .(pl|cgi|py|sh|lua|asp)$ {
      return 444;
    }

    #Disable access to your configuration files and other files that you don’t want to users are able to see
    location ~* /(wp-config.php|readme.html|license.txt|nginx.conf) {
      deny all;
    }

    # Disable wp-config.txt
    location = /wp-config.txt {
        deny all;
    }

    # nginx block wpscann on plugins folder
    location ~* ^/wp-content/plugins/.+\.(txt|log|md)$ {
      deny all;
      error_page 403 =404 / ;
    }

    # Deny access to any files with a .php extension in the uploads directory
    # Works in sub-directory installs and also in multisite network
    # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
    location ~* /(?:uploads|files)/.*\.php$ {
      deny all;
    }

    # Stop scann for the follow files on plugins folder
    location ~* ^/wp-content/plugins/.+\.(txt|log|md)$ {
          deny all;
          error_page 403 =404 / ;
    }

    # Stop scann for the follow files on themes folder
    location ~* ^/wp-content/themes/.+\.(txt|log|md)$ {
          deny all;
          error_page 403 =404 / ;
    }

    #This module will allow us to pattern match certain key files and inject random text in the files that
    # is non-destructive / non-invasive and will most importantly alter the md5sum calculated on such files. All transparent to WPScan.
    location ~* ^/(license.txt|wp-includes/(.*)/.+\.(js|css)|wp-admin/(.*)/.+\.(js|css))$ {
        sub_filter_types text/css text/javascript text/plain;
        sub_filter_once on;
        sub_filter ';' '; /* $msec */ ';
    }

    #Direct PHP File Access
    #If somehow, a hacker successfully sneaks in a PHP file onto your site,
    #they’ll be able to run this file by loading file which effectively becomes a backdoor to infiltrate your site.
    #We should disable direct access to any PHP files by adding the following rules:
    location ~* /(?:uploads|files|wp-content|wp-includes|akismet)/.*.php$ {
        deny all;
    }

    #Dotfiles
    #Similar to PHP file, a dotfile like .htaccess, .user.ini, and .git may contain sensitive information.
    #To be on the safer side, it’s better to disable direct access to these files.
    location ~ /\.(svn|git)/* {
        deny all;
    }

    location ~ /\.ht {
        deny all;
    }

    location ~ /\.user.ini {
        deny all;
    }

    #WordFence
    location ~ \.user\.ini$ {
        deny all;
    }


    # WordPress: deny wp-content, wp-includes php files
    location ~* ^/(?:wp-content|wp-includes)/.*\.php$ {
        deny all;
    }

    # WordPress: deny wp-content/uploads nasty stuff
    location ~* ^/wp-content/uploads/.*\.(?:s?html?|php|js|swf)$ {
        deny all;
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: mariadb
  labels:
    app: mariadb
  name: mariadb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mariadb
      tier: backend
  strategy: {}
  template:
    metadata:
      labels:
        app: mariadb
        tier: backend
    spec:
      securityContext:
        runAsNonRoot: true
      containers:
      - image: mariadb:10.6@sha256:xxxx
        name: mariadb
        imagePullPolicy: Always
        securityContext:
          runAsNonRoot: true
          runAsUser: 10336
          allowPrivilegeEscalation: false
          seccompProfile:
          type: docker/default  # Ensure that the seccomp profile is set to docker/default or runtime/default
          capabilities:
            drop:
              - ALL  # Dropping all capabilities
        resources:
          limits:
            cpu: "0.5"
            memory: "500Mi"
          requests:
            cpu: "0.1"
            memory: "100Mi"
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: ro0tP4sSworD
        - name: MYSQL_DATABASE
          value: wordpress
        - name: MYSQL_USER
          value: wpuser
        - name: MYSQL_PASSWORD
          value: W0rd_Pr3sSUs3r.
        volumeMounts:
        - name: "mariadb-persistent-storage"
          mountPath: "/var/lib/mysql/"
        readinessProbe:
          tcpSocket:
            port: 3306
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          tcpSocket:
            port: 3306
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
      volumes:
      - name: mariadb-persistent-storage
        persistentVolumeClaim:
          claimName: mariadb-pvc
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: mariadb
    tier: backend
  name: mariadb-svc
  namespace: mariadb
spec:
  ports:
  - port: 3306
    protocol: TCP
    targetPort: 3306
  selector:
    app: mariadb
    tier: backend
  type: ClusterIP
